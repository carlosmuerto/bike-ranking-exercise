---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  schemas:
    Record:
      type: object
      properties:
        id:
          type: string
          example: 52df1d2f-3284-4e34-b3fc-daa32f4c41d5
        travelled_distance:
          type: number
          example: 287.27674272098625
        created_at:
          type: string
          example: '2021-12-13T16:55:40.437Z'
    User:
      type: object
      properties:
        id:
          type: string
          example: 52df1d2f-3284-4e34-b3fc-daa32f4c41d5
        name:
          type: string
          example: Scott Wells
        email:
          type: string
          example: scott_wells@test.com
paths:
  "/api/v1/rankings/actual":
    get:
      summary: index_by_actual ranking
      responses:
        '200':
          description: successful
  "/api/v1/rankings/{year}/{month}":
    parameters:
    - name: year
      in: path
      description: year
      required: true
      schema:
        type: string
    - name: month
      in: path
      description: month
      required: true
      schema:
        type: string
    get:
      summary: ranking by year and month
      responses:
        '200':
          description: successful
  "/api/v1/rankings/{year}":
    parameters:
    - name: year
      in: path
      description: year
      required: true
      schema:
        type: string
    get:
      summary: index_by_year ranking
      responses:
        '200':
          description: successful
  "/api/v1/records":
    get:
      summary: list records
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Record"
                required:
                - records
    post:
      summary: create record
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                record:
                  type: object
                  properties:
                    travelled_distance:
                      type: number
                      example: 287.27674272098625
                  required:
                  - travelled_distance
                token:
                  type: string
                  example: 123adf123
              required:
              - record
              - token
  "/api/v1/records/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show record
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Record"
    patch:
      summary: update record
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                record:
                  type: object
                  properties:
                    travelled_distance:
                      type: number
                      example: 287.27674272098625
                  required:
                  - travelled_distance
                token:
                  type: string
                  example: 123adf123
              required:
              - record
              - token
    put:
      summary: update record
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                record:
                  type: object
                  properties:
                    travelled_distance:
                      type: number
                      example: 287.27674272098625
                  required:
                  - travelled_distance
                token:
                  type: string
                  example: 123adf123
              required:
              - record
              - token
    delete:
      summary: delete record
      parameters: []
      responses:
        '204':
          description: No Content
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 123adf123
              required:
              - token
  "/api/v1/users/{user_id}/records":
    parameters:
    - name: user_id
      in: path
      description: user_id
      required: true
      schema:
        type: string
    get:
      summary: index_with_user record
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Record"
                required:
                - records
  "/api/v1/users":
    get:
      summary: list users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Record"
                  specialization:
                    type: string
                    example: specialization
    post:
      summary: create user
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: test
                    email:
                      type: string
                      example: test@test.com
                    password:
                      type: string
                      example: testPassword
                    password_confirmation:
                      type: string
                      example: testPassword
                  required:
                  - name
                  - email
                  - password
                  - password_confirmation
              required:
              - user
  "/api/v1/users/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
    patch:
      summary: update user
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: test
                    email:
                      type: string
                      example: test@test.com
                    password:
                      type: string
                      example: testPassword
                    password_confirmation:
                      type: string
                      example: testPassword
                token:
                  type: string
                  example: 123adf123
              required:
              - token
              - user
    put:
      summary: update user
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: test
                    email:
                      type: string
                      example: test@test.com
                    password:
                      type: string
                      example: testPassword
                    password_confirmation:
                      type: string
                      example: testPassword
                token:
                  type: string
                  example: 123adf123
              required:
              - token
              - user
    delete:
      summary: delete user
      parameters: []
      responses:
        '204':
          description: No Content
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 123adf123
              required:
              - token
  "/api/v1/users/login":
    post:
      summary: login
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: test@test.com
                    password:
                      type: string
                      example: testPassword
                  required:
                  - email
                  - password
              required:
              - user
  "/api/v1/users/logout":
    post:
      summary: logout
      parameters: []
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 123adf123
              required:
              - token
